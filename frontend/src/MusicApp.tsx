import { useEffect, useState } from "react";
import { FaSpotify, FaGithubAlt, FaCaretDown, FaPlus} from "react-icons/fa";
import axios from "axios";

const API_URL = "https://ai-vibe-music.onrender.com/ai";

interface Song {
  title: string;
  artist: string;
  albumCover: string;
  link: string;
}

interface MusicAppProps {
  token: string
}

interface SpotifyUser {
  display_name: string;
  external_urls: { spotify: string };
  images: { url: string }[];
  id: string;
}

export default function MusicApp({token} : MusicAppProps) {
  const [songs, setSongs] = useState<Song[]>([]);
  const [vibe, setVibe] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [user, setUser] = useState<SpotifyUser>();
  const [dropdownOpen, setDropdownOpen] = useState(false);

  useEffect(()=>{
    if(token){
      axios.get('https://api.spotify.com/v1/me', {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }).then(res=>{
        setUser(res.data);
      }).catch(err=>{
        console.error(err)
      })
    }
  },[])

  const fetchSongs = (vibe: string) => {
    setLoading(true);
    setError("");
    fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ vibe }),
    })
      .then((res) => {
        if (!res.ok) {
          throw new Error("Failed to fetch songs");
        }
        return res.json();
      })
      .then((data: Song[]) => setSongs(data))
      .catch((err) => setError(err.message))
      .finally(() => setLoading(false));
  };

  const createPlaylist = async () => {
    if (!user || songs.length === 0) return;

    try {
      const createPlaylistRes = await axios.post(
        `https://api.spotify.com/v1/users/${user.id}/playlists`,
        {
          name: `Vibe: ${vibe}`,
          description: "A playlist generated by AI Vibe Music",
          public: false,
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      const playlistId = createPlaylistRes.data.id;
      const trackUris = songs.map(song => `spotify:track:${song.link.split("/").pop()}`);
      
      await axios.post(
        `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,
        { uris: trackUris },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      alert("Playlist created successfully!");
    } catch (err) {
      console.error("Error creating playlist", err);
      alert("Failed to create playlist.");
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (vibe.trim()) fetchSongs(vibe);
  };

  return (
    <div className="min-h-screen text-white p-6 flex flex-col items-center relative overflow-hidden">
      {/* Cool Background Effect */}
      <div className="absolute inset-0 bg-gradient-to-r from-[#667db6] via-[#0082c8] via-[#0082c8] to-black opacity-50 blur-3xl -z-10" />
      
      {/* Top Bar with Glass UI */}
      <div className="w-full flex justify-between items-center p-4 bg-white/10 backdrop-blur-md shadow-lg rounded-lg mb-6 border border-white/20">
        <h1 className="text-3xl font-extrabold bg-clip-text text-transparent bg-gradient-to-r from-[#0082c8] to-blue-500">GET Gemini Suggested Songs</h1>
        <div className="flex items-center gap-3 relative">
          {user && (
            <>
              <img
                src={user.images[0]?.url || "https://via.placeholder.com/40"}
                alt="Profile"
                className="w-10 h-10 rounded-full"
              />
              <span className="text-lg font-semibold">{user.display_name}</span>
              <button onClick={() => setDropdownOpen(!dropdownOpen)}>
                <FaCaretDown />
              </button>
              {dropdownOpen && (
                <div className="absolute left-0 mt-2 w-40 bg-white text-black rounded-lg shadow-md">
                  <a
                    href={user.external_urls.spotify}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="block px-4 py-2 hover:bg-gray-200"
                  >
                    View Profile
                  </a>
                  <button
                    className="block w-full text-left px-4 py-2 hover:bg-gray-200"
                    onClick={() => console.log("Logout")}
                  >
                    Logout
                  </button>
                </div>
              )}
            </>
          )}
        </div>
      </div>

      <form onSubmit={handleSubmit} className="mb-6 flex gap-4">
        <input
          type="text"
          value={vibe}
          onChange={(e) => setVibe(e.target.value)}
          placeholder="Enter a vibe..."
          className="p-2 rounded-lg text-black"
        />
        <button type="submit" className="bg-blue-500 px-4 py-2 rounded-lg">
          Search
        </button>
      </form>

      {loading && <p className="text-lg font-semibold">Loading songs...</p>}
      {error && <p className="text-red-500 font-semibold">Error: {error}</p>}

      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
        {!loading && !error && songs.map((song, index) => (
          <div
            key={index}
            className="bg-white/10 backdrop-blur-md rounded-2xl overflow-hidden shadow-lg p-4 flex flex-col items-center border border-white/20"
          >
            <img
              src={song.albumCover}
              alt={song.title}
              className="w-40 h-40 object-cover rounded-lg"
            />
            <h2 className="text-xl font-semibold mt-4">{song.title}</h2>
            <p className="">{song.artist}</p>
            <a
              href={song.link}
              target="_blank"
              rel="noopener noreferrer"
              className="mt-4 bg-green-500 px-4 py-2 rounded-lg text-white flex items-center gap-2 hover:bg-green-600"
            >
              <FaSpotify /> Listen
            </a>
          </div>
        ))}
      </div>

      <button className="bg-green-500 px-4 py-2 rounded-lg mb-6 flex items-center gap-2" onClick={createPlaylist} disabled={!songs}>
        <FaPlus /> Create Spotify Playlist
      </button>

      <a
          href="https://github.com/Winstone-Were/ai-vibe-music"
          target="_blank"
          rel="noopener noreferrer"
          className="flex items-center bg-white/10 px-4 py-2 rounded-lg text-white hover:bg-white/20 backdrop-blur-md border border-white/20"
        >
          <FaGithubAlt className="mr-2" /> GitHub
        </a>

    </div>
  );
}